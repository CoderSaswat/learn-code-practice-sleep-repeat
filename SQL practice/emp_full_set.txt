Hereâ€™s an e-commerce schema with multiple related tables and INSERT statements to populate them with data.

Schema Design
The schema consists of the following tables:

Users â€“ Stores user details.
Products â€“ Stores product details.
Categories â€“ Stores product categories.
Orders â€“ Stores order details.
Order_Items â€“ Stores products in each order.
Payments â€“ Stores payment details.
Step 1: Creating the Schema
sql
Copy
Edit
CREATE TABLE Users (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Categories (
    category_id SERIAL PRIMARY KEY,
    category_name VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE Products (
    product_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    stock INT NOT NULL,
    category_id INT,
    FOREIGN KEY (category_id) REFERENCES Categories(category_id) ON DELETE SET NULL
);

CREATE TABLE Orders (
    order_id SERIAL PRIMARY KEY,
    user_id INT NOT NULL,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_price DECIMAL(10,2),
    status VARCHAR(20) CHECK (status IN ('Pending', 'Shipped', 'Delivered', 'Cancelled')),
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE
);

CREATE TABLE Order_Items (
    order_item_id SERIAL PRIMARY KEY,
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES Products(product_id) ON DELETE CASCADE
);

CREATE TABLE Payments (
    payment_id SERIAL PRIMARY KEY,
    order_id INT UNIQUE NOT NULL,
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    amount DECIMAL(10,2) NOT NULL,
    payment_method VARCHAR(50) CHECK (payment_method IN ('Credit Card', 'Debit Card', 'PayPal', 'Cash')),
    status VARCHAR(20) CHECK (status IN ('Pending', 'Completed', 'Failed')),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id) ON DELETE CASCADE
);
Step 2: Insert Data
sql
Copy
Edit
-- Insert Users
INSERT INTO Users (username, email) VALUES
('alice', 'alice@example.com'),
('bob', 'bob@example.com'),
('charlie', 'charlie@example.com'),
('david', 'david@example.com'),
('emma', 'emma@example.com');

-- Insert Categories
INSERT INTO Categories (category_name) VALUES
('Electronics'),
('Clothing'),
('Books'),
('Home & Kitchen');

-- Insert Products
INSERT INTO Products (name, price, stock, category_id) VALUES
('Smartphone', 599.99, 50, 1),
('Laptop', 999.99, 30, 1),
('T-Shirt', 19.99, 100, 2),
('Jeans', 49.99, 60, 2),
('Cookbook', 29.99, 40, 3),
('Fiction Novel', 15.99, 80, 3),
('Blender', 79.99, 25, 4);

-- Insert Orders
INSERT INTO Orders (user_id, total_price, status) VALUES
(1, 619.98, 'Shipped'),
(2, 1069.98, 'Pending'),
(3, 29.99, 'Delivered'),
(4, 99.98, 'Cancelled');

-- Insert Order Items
INSERT INTO Order_Items (order_id, product_id, quantity, price) VALUES
(1, 1, 1, 599.99),
(1, 3, 1, 19.99),
(2, 2, 1, 999.99),
(2, 4, 1, 49.99),
(3, 5, 1, 29.99),
(4, 6, 2, 15.99);

-- Insert Payments
INSERT INTO Payments (order_id, amount, payment_method, status) VALUES
(1, 619.98, 'Credit Card', 'Completed'),
(2, 1069.98, 'PayPal', 'Pending'),
(3, 29.99, 'Debit Card', 'Completed'),
(4, 99.98, 'Credit Card', 'Failed');
Step 3: 50 SQL Queries for Practice
I will now generate 50 SQL queries with answers, covering basic to advanced levels. Stay tuned! ðŸ˜Š

Ecommerce Sql Practice
The schema and sample data are ready! Now, I'll generate 50 SQL queries covering different levelsâ€”basic, intermediate, and advancedâ€”with answers. Stay tuned! ðŸ˜Š


-- Creating Tables
CREATE TABLE Users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Categories (
    category_id INT AUTO_INCREMENT PRIMARY KEY,
    category_name VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE Products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    stock INT NOT NULL,
    category_id INT,
    FOREIGN KEY (category_id) REFERENCES Categories(category_id) ON DELETE SET NULL
);

CREATE TABLE Orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_price DECIMAL(10,2),
    status ENUM('Pending', 'Shipped', 'Delivered', 'Cancelled') NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE
);

CREATE TABLE Order_Items (
    order_item_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES Products(product_id) ON DELETE CASCADE
);

CREATE TABLE Payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT UNIQUE NOT NULL,
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    amount DECIMAL(10,2) NOT NULL,
    payment_method ENUM('Credit Card', 'Debit Card', 'PayPal', 'Cash') NOT NULL,
    status ENUM('Pending', 'Completed', 'Failed') NOT NULL,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id) ON DELETE CASCADE
);

-- Insert Data
INSERT INTO Users (username, email) VALUES
('alice', 'alice@example.com'),
('bob', 'bob@example.com'),
('charlie', 'charlie@example.com'),
('david', 'david@example.com'),
('emma', 'emma@example.com');

INSERT INTO Categories (category_name) VALUES
('Electronics'),
('Clothing'),
('Books'),
('Home & Kitchen');

INSERT INTO Products (name, price, stock, category_id) VALUES
('Smartphone', 599.99, 50, 1),
('Laptop', 999.99, 30, 1),
('T-Shirt', 19.99, 100, 2),
('Jeans', 49.99, 60, 2),
('Cookbook', 29.99, 40, 3),
('Fiction Novel', 15.99, 80, 3),
('Blender', 79.99, 25, 4);

INSERT INTO Orders (user_id, total_price, status) VALUES
(1, 619.98, 'Shipped'),
(2, 1069.98, 'Pending'),
(3, 29.99, 'Delivered'),
(4, 99.98, 'Cancelled');

INSERT INTO Order_Items (order_id, product_id, quantity, price) VALUES
(1, 1, 1, 599.99),
(1, 3, 1, 19.99),
(2, 2, 1, 999.99),
(2, 4, 1, 49.99),
(3, 5, 1, 29.99),
(4, 6, 2, 15.99);

INSERT INTO Payments (order_id, amount, payment_method, status) VALUES
(1, 619.98, 'Credit Card', 'Completed'),
(2, 1069.98, 'PayPal', 'Pending'),
(3, 29.99, 'Debit Card', 'Completed'),
(4, 99.98, 'Credit Card', 'Failed');

Edited
I've updated the SQL script to be compatible with MySQL by using AUTO_INCREMENT, ENUM for status columns, and proper foreign key constraints. Now, I'll generate 50 SQL queries with solutions for you to practice. Stay tuned! ðŸ˜Š

Now give me 50 quetions with answers of all leveles
Here are 50 SQL queries (Basic, Intermediate, and Advanced) with answers for your eCommerce schema.


=============================================================================



Basic Queries
Retrieve all users.

sql
Copy
Edit
SELECT * FROM Users;
Get the total number of users.

sql
Copy
Edit
SELECT COUNT(*) FROM Users;
Fetch all products in the 'Electronics' category.

sql
Copy
Edit
SELECT * FROM Products WHERE category_id = (SELECT category_id FROM Categories WHERE category_name = 'Electronics');
Find all orders placed by 'alice'.

sql
Copy
Edit
SELECT * FROM Orders WHERE user_id = (SELECT user_id FROM Users WHERE username = 'alice');
List all distinct payment methods used.

sql
Copy
Edit
SELECT DISTINCT payment_method FROM Payments;
Get the most expensive product.

sql
Copy
Edit
SELECT * FROM Products ORDER BY price DESC LIMIT 1;
Find all orders that are 'Pending'.

sql
Copy
Edit
SELECT * FROM Orders WHERE status = 'Pending';
Retrieve products with stock greater than 50.

sql
Copy
Edit
SELECT * FROM Products WHERE stock > 50;
Get the total revenue from all completed payments.

sql
Copy
Edit
SELECT SUM(amount) FROM Payments WHERE status = 'Completed';
List products that have not been ordered.

sql
Copy
Edit
SELECT * FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items);
Intermediate Queries
Retrieve the total number of orders per user.

sql
Copy
Edit
SELECT user_id, COUNT(*) AS total_orders FROM Orders GROUP BY user_id;
Find users who have made more than 1 order.

sql
Copy
Edit
SELECT user_id FROM Orders GROUP BY user_id HAVING COUNT(*) > 1;
Get the total amount spent by each user.

sql
Copy
Edit
SELECT user_id, SUM(total_price) FROM Orders GROUP BY user_id;
Find the most popular product (ordered most times).

sql
Copy
Edit
SELECT product_id, SUM(quantity) AS total_sold FROM Order_Items GROUP BY product_id ORDER BY total_sold DESC LIMIT 1;
Find the total number of products sold per category.

sql
Copy
Edit
SELECT c.category_name, SUM(oi.quantity) AS total_sold 
FROM Order_Items oi 
JOIN Products p ON oi.product_id = p.product_id
JOIN Categories c ON p.category_id = c.category_id
GROUP BY c.category_name;
List all orders along with user details.

sql
Copy
Edit
SELECT o.order_id, u.username, o.total_price, o.status 
FROM Orders o 
JOIN Users u ON o.user_id = u.user_id;
Retrieve the highest spending user.

sql
Copy
Edit
SELECT u.username, SUM(o.total_price) AS total_spent 
FROM Orders o 
JOIN Users u ON o.user_id = u.user_id 
GROUP BY u.username 
ORDER BY total_spent DESC LIMIT 1;
Find users who have never placed an order.

sql
Copy
Edit
SELECT * FROM Users WHERE user_id NOT IN (SELECT DISTINCT user_id FROM Orders);
List all orders that have at least one item with a price greater than $100.

sql
Copy
Edit
SELECT DISTINCT o.* FROM Orders o 
JOIN Order_Items oi ON o.order_id = oi.order_id 
WHERE oi.price > 100;
Find the most frequently used payment method.

sql
Copy
Edit
SELECT payment_method, COUNT(*) AS count_used FROM Payments GROUP BY payment_method ORDER BY count_used DESC LIMIT 1;
Advanced Queries
Get the average order value (AOV) for each user.

sql
Copy
Edit
SELECT user_id, AVG(total_price) AS avg_order_value FROM Orders GROUP BY user_id;
Find the category with the highest total sales revenue.

sql
Copy
Edit
SELECT c.category_name, SUM(oi.price * oi.quantity) AS total_revenue 
FROM Order_Items oi 
JOIN Products p ON oi.product_id = p.product_id
JOIN Categories c ON p.category_id = c.category_id
GROUP BY c.category_name 
ORDER BY total_revenue DESC LIMIT 1;
Find the month with the highest total sales.

sql
Copy
Edit
SELECT MONTH(order_date) AS order_month, SUM(total_price) AS total_sales 
FROM Orders GROUP BY order_month ORDER BY total_sales DESC LIMIT 1;
Find the top 3 best-selling products.

sql
Copy
Edit
SELECT p.name, SUM(oi.quantity) AS total_sold 
FROM Order_Items oi 
JOIN Products p ON oi.product_id = p.product_id
GROUP BY p.name ORDER BY total_sold DESC LIMIT 3;
List all users and the number of orders they have placed (including those who haven't placed any orders).

sql
Copy
Edit
SELECT u.username, COUNT(o.order_id) AS total_orders 
FROM Users u 
LEFT JOIN Orders o ON u.user_id = o.user_id 
GROUP BY u.username;
Calculate the total revenue per month.

sql
Copy
Edit
SELECT YEAR(order_date) AS year, MONTH(order_date) AS month, SUM(total_price) AS total_revenue 
FROM Orders GROUP BY year, month ORDER BY year, month;
Find orders where the total amount paid does not match the order total.

sql
Copy
Edit
SELECT o.order_id, o.total_price, p.amount FROM Orders o 
JOIN Payments p ON o.order_id = p.order_id 
WHERE o.total_price <> p.amount;
Get the average product price per category.

sql
Copy
Edit
SELECT c.category_name, AVG(p.price) AS avg_price 
FROM Products p 
JOIN Categories c ON p.category_id = c.category_id 
GROUP BY c.category_name;
Find the user who placed the earliest order.

sql
Copy
Edit
SELECT u.username, o.order_date FROM Orders o 
JOIN Users u ON o.user_id = u.user_id 
ORDER BY o.order_date ASC LIMIT 1;
Calculate the total number of items sold per category.

sql
Copy
Edit
SELECT c.category_name, SUM(oi.quantity) AS total_sold 
FROM Order_Items oi 
JOIN Products p ON oi.product_id = p.product_id 
JOIN Categories c ON p.category_id = c.category_id 
GROUP BY c.category_name;
Bonus Complex Queries (Joins, Subqueries, and CTEs)
Find the category with the lowest number of sales.

sql
Copy
Edit
SELECT c.category_name, SUM(oi.quantity) AS total_sold 
FROM Order_Items oi 
JOIN Products p ON oi.product_id = p.product_id 
JOIN Categories c ON p.category_id = c.category_id 
GROUP BY c.category_name ORDER BY total_sold ASC LIMIT 1;
Retrieve all products that have been ordered at least once.

sql
Copy
Edit
SELECT DISTINCT p.* FROM Products p 
JOIN Order_Items oi ON p.product_id = oi.product_id;
Calculate the percentage of completed payments per total orders.

sql
Copy
Edit
SELECT (COUNT(CASE WHEN status = 'Completed' THEN 1 END) / COUNT(*)) * 100 AS completion_rate FROM Payments;
Would you like more queries, or should I refine any of these? ðŸš€

You said:
Yeah give more queries
ChatGPT said:
Here are more advanced SQL queries for your eCommerce schema. These include window functions, recursive queries, and complex joins to push your SQL skills further.

More Advanced Queries
Find the total revenue for each payment method.

sql
Copy
Edit
SELECT payment_method, SUM(amount) AS total_revenue 
FROM Payments 
GROUP BY payment_method 
ORDER BY total_revenue DESC;
Find the user who has spent the most money on orders.

sql
Copy
Edit
SELECT u.username, SUM(o.total_price) AS total_spent 
FROM Orders o 
JOIN Users u ON o.user_id = u.user_id 
GROUP BY u.username 
ORDER BY total_spent DESC LIMIT 1;
Get the total number of products ordered per user.

sql
Copy
Edit
SELECT u.username, SUM(oi.quantity) AS total_products_ordered 
FROM Users u 
JOIN Orders o ON u.user_id = o.user_id 
JOIN Order_Items oi ON o.order_id = oi.order_id 
GROUP BY u.username;
Retrieve orders that contain at least 2 different products.

sql
Copy
Edit
SELECT order_id FROM Order_Items 
GROUP BY order_id 
HAVING COUNT(DISTINCT product_id) >= 2;
Get the total revenue per user.

sql
Copy
Edit
SELECT u.username, SUM(p.amount) AS total_revenue 
FROM Payments p 
JOIN Orders o ON p.order_id = o.order_id 
JOIN Users u ON o.user_id = u.user_id 
GROUP BY u.username 
ORDER BY total_revenue DESC;
Find the average order value (AOV) per user.

sql
Copy
Edit
SELECT u.username, AVG(o.total_price) AS avg_order_value 
FROM Orders o 
JOIN Users u ON o.user_id = u.user_id 
GROUP BY u.username;
Find the most frequently used payment method for each user.

sql
Copy
Edit
SELECT user_id, payment_method, COUNT(*) AS usage_count 
FROM Payments p 
JOIN Orders o ON p.order_id = o.order_id 
GROUP BY user_id, payment_method 
ORDER BY user_id, usage_count DESC;
List users who have placed orders but have no successful payments.

sql
Copy
Edit
SELECT DISTINCT u.username FROM Users u 
JOIN Orders o ON u.user_id = o.user_id 
LEFT JOIN Payments p ON o.order_id = p.order_id AND p.status = 'Completed' 
WHERE p.payment_id IS NULL;
Find the most expensive order ever placed.

sql
Copy
Edit
SELECT * FROM Orders ORDER BY total_price DESC LIMIT 1;
Find the number of products ordered per category.

sql
Copy
Edit
SELECT c.category_name, SUM(oi.quantity) AS total_quantity 
FROM Order_Items oi 
JOIN Products p ON oi.product_id = p.product_id 
JOIN Categories c ON p.category_id = c.category_id 
GROUP BY c.category_name;
Get the top 3 customers who have placed the highest number of orders.

sql
Copy
Edit
SELECT u.username, COUNT(o.order_id) AS total_orders 
FROM Orders o 
JOIN Users u ON o.user_id = u.user_id 
GROUP BY u.username 
ORDER BY total_orders DESC LIMIT 3;
Window Functions
Rank all users based on their total spending.

sql
Copy
Edit
SELECT u.username, SUM(o.total_price) AS total_spent, 
       RANK() OVER (ORDER BY SUM(o.total_price) DESC) AS spending_rank
FROM Orders o 
JOIN Users u ON o.user_id = u.user_id 
GROUP BY u.username;
Find the top-selling product in each category.

sql
Copy
Edit
SELECT category_name, name, total_sold FROM (
    SELECT c.category_name, p.name, SUM(oi.quantity) AS total_sold,
           RANK() OVER (PARTITION BY c.category_name ORDER BY SUM(oi.quantity) DESC) AS rnk
    FROM Order_Items oi 
    JOIN Products p ON oi.product_id = p.product_id 
    JOIN Categories c ON p.category_id = c.category_id 
    GROUP BY c.category_name, p.name
) ranked WHERE rnk = 1;
Find the cumulative revenue per month.

sql
Copy
Edit
SELECT YEAR(order_date) AS year, MONTH(order_date) AS month, 
       SUM(total_price) AS monthly_revenue, 
       SUM(SUM(total_price)) OVER (ORDER BY YEAR(order_date), MONTH(order_date)) AS cumulative_revenue
FROM Orders 
GROUP BY year, month;
Recursive Queries
Find all orders with their payment details (recursive approach).

sql
Copy
Edit
WITH OrderPayments AS (
    SELECT o.order_id, o.total_price, p.amount, p.payment_method, p.status 
    FROM Orders o 
    LEFT JOIN Payments p ON o.order_id = p.order_id
) 
SELECT * FROM OrderPayments;
Find categories where all products have been ordered at least once.

sql
Copy
Edit
SELECT category_name FROM Categories c 
WHERE NOT EXISTS (
    SELECT * FROM Products p 
    WHERE p.category_id = c.category_id 
    AND NOT EXISTS (SELECT * FROM Order_Items oi WHERE oi.product_id = p.product_id)
);
Find the user who placed the most recent order.

sql
Copy
Edit
SELECT u.username, o.order_date FROM Orders o 
JOIN Users u ON o.user_id = u.user_id 
ORDER BY o.order_date DESC LIMIT 1;
These 50+ queries should cover all levels, from basic to expert.
Let me know if you need more challenges or explanations! ðŸš€

You said:
give more queries 
ChatGPT said:
Here are 25 more SQL queries to deepen your practice, covering advanced joins, subqueries, aggregate functions, window functions, recursive queries, and performance optimization.

More Advanced SQL Queries
Subqueries & Joins
Find users who have never placed an order.

sql
Copy
Edit
SELECT * FROM Users 
WHERE user_id NOT IN (SELECT DISTINCT user_id FROM Orders);
Retrieve the total amount spent by each user (including users who haven't made a purchase).

sql
Copy
Edit
SELECT u.username, COALESCE(SUM(o.total_price), 0) AS total_spent
FROM Users u 
LEFT JOIN Orders o ON u.user_id = o.user_id 
GROUP BY u.username;
Get products that have never been ordered.

sql
Copy
Edit
SELECT * FROM Products 
WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items);
Find users who have placed at least 2 orders.

sql
Copy
Edit
SELECT user_id, COUNT(order_id) AS total_orders 
FROM Orders 
GROUP BY user_id 
HAVING total_orders >= 2;
Get the top 5 most expensive orders.

sql
Copy
Edit
SELECT * FROM Orders 
ORDER BY total_price DESC 
LIMIT 5;
Aggregate Functions
Find the category with the highest total sales value.

sql
Copy
Edit
SELECT c.category_name, SUM(oi.quantity * oi.price) AS total_sales
FROM Order_Items oi
JOIN Products p ON oi.product_id = p.product_id
JOIN Categories c ON p.category_id = c.category_id
GROUP BY c.category_name
ORDER BY total_sales DESC LIMIT 1;
Calculate the average order value (AOV).

sql
Copy
Edit
SELECT AVG(total_price) AS avg_order_value 
FROM Orders;
Find the percentage of orders that are completed successfully.

sql
Copy
Edit
SELECT 
    (COUNT(CASE WHEN status = 'Delivered' THEN 1 END) * 100.0) / COUNT(*) AS success_percentage
FROM Orders;
Find the month with the highest sales.

sql
Copy
Edit
SELECT YEAR(order_date) AS year, MONTH(order_date) AS month, SUM(total_price) AS total_sales
FROM Orders
GROUP BY year, month
ORDER BY total_sales DESC
LIMIT 1;
Find the best-selling product (by quantity).

sql
Copy
Edit
SELECT p.name, SUM(oi.quantity) AS total_quantity_sold
FROM Order_Items oi
JOIN Products p ON oi.product_id = p.product_id
GROUP BY p.name
ORDER BY total_quantity_sold DESC LIMIT 1;
Window Functions
Rank users based on their total spending.

sql
Copy
Edit
SELECT u.username, SUM(o.total_price) AS total_spent,
       RANK() OVER (ORDER BY SUM(o.total_price) DESC) AS spending_rank
FROM Orders o
JOIN Users u ON o.user_id = u.user_id
GROUP BY u.username;
Find the running total of revenue per month.

sql
Copy
Edit
SELECT YEAR(order_date) AS year, MONTH(order_date) AS month, 
       SUM(total_price) AS monthly_sales,
       SUM(SUM(total_price)) OVER (ORDER BY YEAR(order_date), MONTH(order_date)) AS running_total
FROM Orders
GROUP BY year, month;
Find the last order date for each user.

sql
Copy
Edit
SELECT user_id, MAX(order_date) AS last_order_date 
FROM Orders 
GROUP BY user_id;
Find the difference in revenue between the current and previous month.

sql
Copy
Edit
SELECT YEAR(order_date) AS year, MONTH(order_date) AS month,
       SUM(total_price) AS monthly_sales,
       LAG(SUM(total_price)) OVER (ORDER BY YEAR(order_date), MONTH(order_date)) AS previous_month_sales,
       SUM(total_price) - LAG(SUM(total_price)) OVER (ORDER BY YEAR(order_date), MONTH(order_date)) AS revenue_difference
FROM Orders
GROUP BY year, month;
Recursive Queries
Find all users who have referred at least one other user.

sql
Copy
Edit
WITH ReferralCount AS (
    SELECT user_id, COUNT(*) AS referral_count
    FROM Users
    GROUP BY user_id
)
SELECT * FROM ReferralCount WHERE referral_count > 0;
Find all categories with no products.

sql
Copy
Edit
SELECT c.category_name
FROM Categories c
LEFT JOIN Products p ON c.category_id = p.category_id
WHERE p.product_id IS NULL;
Find users who have only ever placed cancelled orders.

sql
Copy
Edit
SELECT DISTINCT u.username FROM Users u
JOIN Orders o ON u.user_id = o.user_id
WHERE o.status = 'Cancelled' 
AND NOT EXISTS (SELECT 1 FROM Orders o2 WHERE o2.user_id = u.user_id AND o2.status != 'Cancelled');
Performance Optimization Queries
Find the most expensive order using an indexed subquery.

sql
Copy
Edit
SELECT * FROM Orders 
WHERE total_price = (SELECT MAX(total_price) FROM Orders);
Use an index to speed up searches for a specific userâ€™s orders.

sql
Copy
Edit
CREATE INDEX idx_user_orders ON Orders(user_id);
Optimize order retrieval by preloading product data.

sql
Copy
Edit
SELECT o.order_id, o.user_id, p.name, oi.quantity, oi.price
FROM Orders o
JOIN Order_Items oi ON o.order_id = oi.order_id
JOIN Products p ON oi.product_id = p.product_id
WHERE o.order_id = 1;
Identify duplicate products by name.

sql
Copy
Edit
SELECT name, COUNT(*) AS duplicate_count
FROM Products
GROUP BY name
HAVING COUNT(*) > 1;
Find products with the lowest stock levels.

sql
Copy
Edit
SELECT * FROM Products 
WHERE stock = (SELECT MIN(stock) FROM Products);
Miscellaneous Queries
Find the highest-priced product in each category.

sql
Copy
Edit
SELECT category_name, name, price FROM (
    SELECT c.category_name, p.name, p.price,
           RANK() OVER (PARTITION BY c.category_name ORDER BY p.price DESC) AS rnk
    FROM Products p
    JOIN Categories c ON p.category_id = c.category_id
) ranked WHERE rnk = 1;
Calculate the profit margin for each product (assuming a cost price column).

sql
Copy
Edit
ALTER TABLE Products ADD COLUMN cost_price DECIMAL(10,2); -- Add column first if not exists
UPDATE Products SET cost_price = price * 0.7; -- Assume a 30% profit margin
SELECT name, price, cost_price, (price - cost_price) AS profit_margin
FROM Products;
Get a list of orders with total items and total value.

sql
Copy
Edit
SELECT o.order_id, COUNT(oi.order_item_id) AS total_items, SUM(oi.price * oi.quantity) AS total_value
FROM Orders o
JOIN Order_Items oi ON o.order_id = oi.order_id
GROUP BY o.order_id;
Want More?
Thatâ€™s 75 queries! ðŸŽ¯
If you need even harder problems, index tuning, or real-world query optimization, let me know! ðŸš€

You said:
more intermediate join queries
ChatGPT said:
Here are 25 more intermediate SQL JOIN queries to enhance your practice. These will focus on INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN (simulated in MySQL), CROSS JOIN, and SELF JOIN.

Basic INNER JOIN Queries
Get all orders with their respective user details.
sql
Copy
Edit
SELECT o.order_id, u.username, u.email, o.order_date, o.total_price, o.status
FROM Orders o
INNER JOIN Users u ON o.user_id = u.user_id;
Retrieve all ordered products along with the category they belong to.
sql
Copy
Edit
SELECT oi.order_id, p.name AS product_name, c.category_name, oi.quantity, oi.price
FROM Order_Items oi
INNER JOIN Products p ON oi.product_id = p.product_id
INNER JOIN Categories c ON p.category_id = c.category_id;
Find the payment details for each order.
sql
Copy
Edit
SELECT o.order_id, u.username, p.payment_method, p.amount, p.status
FROM Orders o
INNER JOIN Payments p ON o.order_id = p.order_id
INNER JOIN Users u ON o.user_id = u.user_id;
Get order details including total quantity of items in each order.
sql
Copy
Edit
SELECT o.order_id, u.username, SUM(oi.quantity) AS total_items, o.total_price, o.status
FROM Orders o
INNER JOIN Order_Items oi ON o.order_id = oi.order_id
INNER JOIN Users u ON o.user_id = u.user_id
GROUP BY o.order_id, u.username, o.total_price, o.status;
Find which products have been ordered at least once.
sql
Copy
Edit
SELECT DISTINCT p.product_id, p.name AS product_name
FROM Products p
INNER JOIN Order_Items oi ON p.product_id = oi.product_id;
LEFT JOIN Queries
Get all users and their orders (including users who have never placed an order).
sql
Copy
Edit
SELECT u.user_id, u.username, o.order_id, o.total_price, o.status
FROM Users u
LEFT JOIN Orders o ON u.user_id = o.user_id;
List all products and show if they have been ordered.
sql
Copy
Edit
SELECT p.product_id, p.name AS product_name, oi.order_id
FROM Products p
LEFT JOIN Order_Items oi ON p.product_id = oi.product_id;
Show all categories and the number of products in each (including categories with no products).
sql
Copy
Edit
SELECT c.category_id, c.category_name, COUNT(p.product_id) AS product_count
FROM Categories c
LEFT JOIN Products p ON c.category_id = p.category_id
GROUP BY c.category_id, c.category_name;
Find users who have never placed an order.
sql
Copy
Edit
SELECT u.user_id, u.username
FROM Users u
LEFT JOIN Orders o ON u.user_id = o.user_id
WHERE o.order_id IS NULL;
List all products and show if they have ever been ordered, including their order count.
sql
Copy
Edit
SELECT p.product_id, p.name, COUNT(oi.order_id) AS total_orders
FROM Products p
LEFT JOIN Order_Items oi ON p.product_id = oi.product_id
GROUP BY p.product_id, p.name;
RIGHT JOIN Queries
Find all orders and their respective users, including orphaned orders (if any).
sql
Copy
Edit
SELECT o.order_id, u.username, u.email, o.total_price, o.status
FROM Users u
RIGHT JOIN Orders o ON u.user_id = o.user_id;
List all products and their categories, ensuring all products appear even if they don't belong to a category.
sql
Copy
Edit
SELECT p.product_id, p.name AS product_name, c.category_name
FROM Categories c
RIGHT JOIN Products p ON c.category_id = p.category_id;
Get all payments and their corresponding orders, including payments not linked to any order.
sql
Copy
Edit
SELECT p.payment_id, o.order_id, p.payment_method, p.amount, p.status
FROM Payments p
RIGHT JOIN Orders o ON p.order_id = o.order_id;
Find all categories and show the products belonging to them (even if some categories have no products).
sql
Copy
Edit
SELECT c.category_id, c.category_name, p.name AS product_name
FROM Categories c
RIGHT JOIN Products p ON c.category_id = p.category_id;
Find all users who have made orders, ensuring all orders appear even if the user was deleted.
sql
Copy
Edit
SELECT o.order_id, u.username, o.total_price, o.status
FROM Users u
RIGHT JOIN Orders o ON u.user_id = o.user_id;
FULL JOIN (Simulated in MySQL using UNION)
Find all users and orders (including users with no orders and orders with no users).
sql
Copy
Edit
SELECT u.username, o.order_id, o.total_price, o.status
FROM Users u
LEFT JOIN Orders o ON u.user_id = o.user_id
UNION
SELECT u.username, o.order_id, o.total_price, o.status
FROM Users u
RIGHT JOIN Orders o ON u.user_id = o.user_id;
Find all products and their categories, ensuring all products and all categories appear.
sql
Copy
Edit
SELECT p.name AS product_name, c.category_name
FROM Products p
LEFT JOIN Categories c ON p.category_id = c.category_id
UNION
SELECT p.name AS product_name, c.category_name
FROM Products p
RIGHT JOIN Categories c ON p.category_id = c.category_id;
CROSS JOIN Queries
Get all possible product-category combinations.
sql
Copy
Edit
SELECT p.name AS product_name, c.category_name
FROM Products p
CROSS JOIN Categories c;
Generate all possible product-user combinations.
sql
Copy
Edit
SELECT u.username, p.name AS product_name
FROM Users u
CROSS JOIN Products p;
SELF JOIN Queries
Find duplicate users (based on email).
sql
Copy
Edit
SELECT u1.user_id AS duplicate_1, u2.user_id AS duplicate_2, u1.email
FROM Users u1
JOIN Users u2 ON u1.email = u2.email AND u1.user_id < u2.user_id;
Find users who signed up on the same day.
sql
Copy
Edit
SELECT u1.username AS user1, u2.username AS user2, u1.created_at
FROM Users u1
JOIN Users u2 ON u1.created_at = u2.created_at AND u1.user_id < u2.user_id;
Find products that belong to the same category.
sql
Copy
Edit
SELECT p1.name AS product1, p2.name AS product2, c.category_name
FROM Products p1
JOIN Products p2 ON p1.category_id = p2.category_id AND p1.product_id < p2.product_id
JOIN Categories c ON p1.category_id = c.category_id;
Find orders that have similar total prices.
sql
Copy
Edit
SELECT o1.order_id AS order1, o2.order_id AS order2, o1.total_price
FROM Orders o1
JOIN Orders o2 ON o1.total_price = o2.total_price AND o1.order_id < o2.order_id;
Find all product pairs ordered together.
sql
Copy
Edit
SELECT oi1.product_id AS product1, oi2.product_id AS product2, COUNT(*) AS times_ordered_together
FROM Order_Items oi1
JOIN Order_Items oi2 ON oi1.order_id = oi2.order_id AND oi1.product_id < oi2.product_id
GROUP BY oi1.product_id, oi2.product_id;
Find users who referred each other (if a referral system exists).
sql
Copy
Edit
SELECT u1.username AS referrer, u2.username AS referred_user
FROM Users u1
JOIN Users u2 ON u1.user_id = u2.referred_by;
Thatâ€™s 50+ JOIN queries!
Let me know if you want more complex scenarios! 